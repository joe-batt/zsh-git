# vim: set syntax=zsh:
if [ -n "$__CURRENT_GIT_BRANCH" ]; then
    local state_string

    # Check for behind/ahead state
    if ! [[ -z $__CURRENT_GIT_BRANCH_STATUS ]]; then
        case "$__CURRENT_GIT_BRANCH_STATUS" in
          ahead*behind*) 
            state_string+="%b%F{$ZSH_GIT_COLORS[ahead_behind]}${${__CURRENT_GIT_BRANCH_STATUS#*" "}%,*}$ZSH_GIT_SYMBOLS[ahead_behind]"
            state_string+="${__CURRENT_GIT_BRANCH_STATUS##*" "}%B"
            ;;
          ahead*)
            state_string+="%F{$ZSH_GIT_COLORS[ahead]}${__CURRENT_GIT_BRANCH_STATUS#*" "}$ZSH_GIT_SYMBOLS[ahead]"
            ;;
          diverged*)
            state_string+="$(__zsh_symbol_color_helper diverged)"
            ;;
          behind*)
            state_string+="%F{$ZSH_GIT_COLORS[behind]}${__CURRENT_GIT_BRANCH_STATUS#*" "}$ZSH_GIT_SYMBOLS[behind]"
            ;;
        esac
    fi

    # Check for stashed files
    if [[ $__CURRENT_GIT_STAGED -gt 0 ]]; then
        state_string+="%b%F{$ZSH_GIT_COLORS[stashed]}${__CURRENT_GIT_STAGED}$ZSH_GIT_SYMBOLS[stashed]%B"
    fi

    # Parse current state (modified, added, etc)
    if ! [[ -z "$__CURRENT_GIT_STATE" ]]; then
        for state in ${__CURRENT_GIT_STATE}; do
            ! [[ -z $ZSH_GIT_STATE_STRINGS[$state] ]] && state_string+=$ZSH_GIT_STATE_STRINGS[$state]
        done
    fi

    # output prompt
    echo -n "$fg_bold[default](%F{$ZSH_GIT_COLORS[branch]}${__CURRENT_GIT_BRANCH}%b"
 
    if ! [[ -z $state_string ]]; then
        echo -n "$fg_bold[default]|$state_string"
    fi

    echo -n "$fg_bold[default])"
fi
